
          </li>
          <li class="sidebar_items" onclick="display_toggle_side_Popup('layers_tool')">
            <span class="material-symbols-outlined">stacks</span>
            <ul id="layers_tool" class="side_menu_popup">

              <div class="inputGroup">
                <input type="checkbox" id="rivers" name="rivers" value="rivers_pgis"
                  onchange="handleLayerToggle(event)">
                <label for="rivers">rivers</label> <br>
              </div>

              <div class="inputGroup">
                <input type="checkbox" id="india_st" name="india_st" value="india_st_pgis"
                  onchange="handleLayerToggle(event)">
                <label for="india_st">india states</label> <br>
              </div>

              <div class="inputGroup">
                <input type="checkbox" id="dams" name="dams" value="indian_dams" onchange="handleLayerToggle(event)">
                <label for="dams">dams</label> <br>
              </div>

              <div class="inputGroup">
                <input type="checkbox" id="base" name="base" value="osmTile" checked
                  onchange="handleLayerToggle(event)">
                <label for="Base">OSM</label> <br>
              </div>
              <div class="inputGroup">
                <input type="checkbox" id="rivers" name="rivers" value="rivers_pgis"
                  onchange="handleLayerToggle(event)">
                <label for="rivers">rivers</label> <br>
              </div>

              <div class="inputGroup">
                <input type="checkbox" id="india_st" name="india_st" value="india_st_pgis"
                  onchange="handleLayerToggle(event)">
                <label for="india_st">india states</label> <br>
              </div>

              <div class="inputGroup">
                <input type="checkbox" id="dams" name="dams" value="indian_dams" onchange="handleLayerToggle(event)">
                <label for="dams">dams</label> <br>
              </div>

              <div class="inputGroup">
                <input type="checkbox" id="base" name="base" value="osmTile" checked
                  onchange="handleLayerToggle(event)">
                <label for="Base">OSM</label> <br>
              </div>
            </ul>
          </li>



import './style.css';
import { Map, View } from 'ol';
import OSM from 'ol/source/OSM';
// import {FullScreen, defaults as defaultControls} from 'ol/control.js';
import Control from 'ol/control/Control';
import { fromLonLat } from 'ol/proj';
import Draw from 'ol/interaction/Draw.js';
import Overlay from 'ol/Overlay.js';
import { Circle as CircleStyle, Fill, Stroke, Style } from 'ol/style.js';
import { LineString, Polygon } from 'ol/geom.js';
import { Vector as VectorSource } from 'ol/source.js';
import { Tile as TileLayer, Vector as VectorLayer } from 'ol/layer.js';
import { getArea, getLength } from 'ol/sphere.js';
import { unByKey } from 'ol/Observable.js';

const raster = new TileLayer({
  source: new OSM(),
});

// const source = new VectorSource();

const source = new VectorSource({wrapX: false});


const vector = new VectorLayer({
  source: source,
  style: {
    'fill-color': 'rgba(255, 255, 255, 0.2)',
    'stroke-color': '#ffcc33',
    'stroke-width': 2,
    'circle-radius': 7,
    'circle-fill-color': '#ffcc33',
  },
});

const map = new Map({
  layers: [raster, vector],
  target: 'map',
  view: new View({
    center: new fromLonLat([92.07298769282396, 26.213469404852535]),
    zoom: 6
  }),
  controls: []
});





//Custom Home Click functionality Starts....

function customHome(event) {

  // const homeButton = document.getElementById(event);
  const homeCoords = [10300257, 3061038];
  map.getView().setCenter(homeCoords);
  map.getView().setZoom(6); // Optional: Set zoom level for home view
}

window.handleHome = function (event) {
  customHome(event);
};

// Home Click  functionality Ends.....



//Custom Zoom- in  and Zoom-out functionality Starts....

function customZoom(event) {
  console.log(event)
  if (event == "zIn") {
    const view = map.getView();
    const currentZoom = view.getZoom();
    // Adjust zoom step based on your preference (e.g., 0.5)
    const newZoom = currentZoom + 0.5;
    view.setZoom(Math.min(newZoom, view.getMaxZoom())); // Prevent exceeding max zoom
  }
  else if (event == "zOut") {
    const view = map.getView();
    const currentZoom = view.getZoom();
    const newZoom = currentZoom - 0.5;
    view.setZoom(Math.max(newZoom, view.getMinZoom())); // Prevent zooming below min zoom

  }
}

window.handleZoom = function (event) {
  customZoom(event);
};
//Zoom- in  and Zoom-out functionality Ends.....





//Custom Full Screen functionality Starts....




function customFullscreen(event) {
  if (document.fullscreenEnabled) {
    // Fullscreen API is supported
    console.log("full screen supported");

    if (event == "easeIn") {
      function enterFullscreen(element) {
        if (element.requestFullscreen) {
          element.requestFullscreen();
        } else if (element.webkitRequestFullscreen) { // Webkit prefix
          element.webkitRequestFullscreen();
        } else if (element.mozRequestFullScreen) { // Mozilla prefix
          element.mozRequestFullScreen();
        } else {
          // Handle fallback scenarios (optional)
        }
      }

      // Usage:
      const mapElement = document.getElementById('body');
      enterFullscreen(mapElement);
    } else {
      function exitFullscreen() {
        if (document.exitFullscreen) {
          document.exitFullscreen();
        } else if (document.webkitExitFullscreen) { // Webkit prefix
          document.webkitExitFullscreen();
        } else if (document.mozCancelFullScreen) { // Mozilla prefix
          document.mozCancelFullScreen();
        } else {
          // Handle fallback scenarios (optional)
        }
      }

      // Usage:
      exitFullscreen();


    }


  } else {
    // Handle fallback scenarios (optional)
    console.log("full screen not supported");
  }
}

window.handleFullscreen = function (event) {
  customFullscreen(event);
};

// Custom Full Screen functionality Ends.....







/**
 * Currently drawn feature.
 * @type {import("ol/Feature.js").default}
 */
let sketch;

/**
 * The help tooltip element.
 * @type {HTMLElement}
 */
let helpTooltipElement;

/**
 * Overlay to show the help messages.
 * @type {Overlay}
 */
let helpTooltip;

/**
 * The measure tooltip element.
 * @type {HTMLElement}
 */
let measureTooltipElement;

/**
 * Overlay to show the measurement.
 * @type {Overlay}
 */
let measureTooltip;

/**
 * Message to show when the user is drawing a polygon.
 * @type {string}
 */
const continuePolygonMsg = 'Click to continue drawing the polygon';

/**
 * Message to show when the user is drawing a line.
 * @type {string}
 */
const continueLineMsg = 'Click to continue drawing the line';

/**
 * Handle pointer move.
 * @param {import("ol/MapBrowserEvent").default} evt The event.
 */
const pointerMoveHandler = function (evt) {
  if (evt.dragging) {
    return;
  }
  /** @type {string} */
  let helpMsg = 'Click to start drawing';

  if (sketch) {
    const geom = sketch.getGeometry();
    if (geom instanceof Polygon) {
      helpMsg = continuePolygonMsg;
    } else if (geom instanceof LineString) {
      helpMsg = continueLineMsg;
    }
  }

  helpTooltipElement.innerHTML = helpMsg;
  helpTooltip.setPosition(evt.coordinate);

  helpTooltipElement.classList.remove('hidden');
};



map.on('pointermove', pointerMoveHandler);

map.getViewport().addEventListener('mouseout', function () {
  helpTooltipElement.classList.add('hidden');
});


let draw; // global so we can remove it later

/**
 * Format length output.
 * @param {LineString} line The line.
 * @return {string} The formatted length.
 */






const formatLength = function (line) {
  const length = getLength(line);
  let output;
  if (length > 100) {
    output = Math.round((length / 1000) * 100) / 100 + ' ' + 'km';
  } else {
    output = Math.round(length * 100) / 100 + ' ' + 'm';
  }
  return output;
};

/**
 * Format area output.
 * @param {Polygon} polygon The polygon.
 * @return {string} Formatted area.
 */
const formatArea = function (polygon) {
  const area = getArea(polygon);
  let output;
  if (area > 10000) {
    output = Math.round((area / 1000000) * 100) / 100 + ' ' + 'km<sup>2</sup>';
  } else {
    output = Math.round(area * 100) / 100 + ' ' + 'm<sup>2</sup>';
  }
  return output;
};

const style = new Style({
  fill: new Fill({
    color: 'rgba(255, 255, 255, 0.2)',
  }),
  stroke: new Stroke({
    color: 'rgba(0, 0, 0, 0.5)',
    lineDash: [10, 10],
    width: 2,
  }),
  image: new CircleStyle({
    radius: 5,
    stroke: new Stroke({
      color: 'rgba(0, 0, 0, 0.7)',
    }),
    fill: new Fill({
      color: 'rgba(255, 255, 255, 0.2)',
    }),
    
  }),
});


function customMeasure(event) {
  console.log(event)

    // const type = event == 'area' ? 'Polygon' : 'LineString';

    // console.log(type)

    if(event==='clear'){
     
        // removeInteractions();
        console.log(map.getOverlays())
        map.getOverlays().clear();
        // measureTooltip.getSource().clear();
        // helpTooltip.getSource().clear();
        return
     
    }
    draw = new Draw({
      source: source,
      type: event,
      style: function (feature) {
        const geometryType = feature.getGeometry().getType();
        if (geometryType === event || geometryType === 'Point') {
          return style;
        }
      },
    });
    map.addInteraction(draw);

    createMeasureTooltip();
    createHelpTooltip();

    let listener;
    draw.on('drawstart', function (evt) {
      // set sketch
      sketch = evt.feature;

      /** @type {import("ol/coordinate.js").Coordinate|undefined} */
      let tooltipCoord = evt.coordinate;

      listener = sketch.getGeometry().on('change', function (evt) {
        const geom = evt.target;
        let output;
        if (geom instanceof Polygon) {
          output = formatArea(geom);
          tooltipCoord = geom.getInteriorPoint().getCoordinates();
        } else if (geom instanceof LineString) {
          output = formatLength(geom);
          tooltipCoord = geom.getLastCoordinate();
        }
        measureTooltipElement.innerHTML = output;
        measureTooltip.setPosition(tooltipCoord);
      });
    });

    draw.on('drawend', function () {
      measureTooltipElement.className = 'ol-tooltip ol-tooltip-static';
      measureTooltip.setOffset([0, -7]);
      // unset sketch
      sketch = null;
      // unset tooltip so that a new one can be created
      measureTooltipElement = null;
      createMeasureTooltip();
      unByKey(listener);
    });


}









/**
 * Creates a new help tooltip
 */
function createHelpTooltip() {
  if (helpTooltipElement) {
    helpTooltipElement.parentNode.removeChild(helpTooltipElement);
  }
  helpTooltipElement = document.createElement('div');
  helpTooltipElement.className = 'ol-tooltip hidden';
  helpTooltip = new Overlay({
    element: helpTooltipElement,
    offset: [15, 0],
    positioning: 'center-left',
  });
  map.addOverlay(helpTooltip);
}

/**
 * Creates a new measure tooltip
 */
function createMeasureTooltip() {
  if (measureTooltipElement) {
    measureTooltipElement.parentNode.removeChild(measureTooltipElement);
  }
  measureTooltipElement = document.createElement('div');
  measureTooltipElement.className = 'ol-tooltip ol-tooltip-measure';
  measureTooltip = new Overlay({
    element: measureTooltipElement,
    offset: [0, -15],
    positioning: 'bottom-center',
    stopEvent: false,
    insertFirst: false,
  });
  map.addOverlay(measureTooltip);
}

/**
 * Let user change the geometry type.
 */
// typeSelect.onchange = function () {
//   map.removeInteraction(draw);
//   addInteraction();
// };
 

window.handleMeasure = function (event) {
  map.removeInteraction(draw);
  customMeasure(event);
};




// Draw feature

const drawStyles = {
  Point: {
    'circle-radius': 5,
    'circle-fill-color': 'red',
  },
  LineString: {
    'circle-radius': 5,
    'circle-fill-color': 'red',
    'stroke-color': 'yellow',
    'stroke-width': 2,
  },
  Polygon: {
    'circle-radius': 5,
    'circle-fill-color': 'red',
    'stroke-color': 'yellow',
    'stroke-width': 2,
    'fill-color': 'blue',
  },
  Circle: {
    'circle-radius': 5,
    'circle-fill-color': 'red',
    'stroke-color': 'blue',
    'stroke-width': 2,
    'fill-color': 'yellow',
  },
};

let drawFeature;
function customDraw(event){
  const value = event;
  if (value !== 'None') {
    drawFeature = new Draw({
      source: source,
      type: event,
      style: style[value],
    });
    map.addInteraction(drawFeature);
  }
}

window.handleDraw = function (event) {
  map.removeInteraction(drawFeature);
  customDraw(event);
};

// print functionality

// proj4.defs(
//   'EPSG:27700',
//   '+proj=tmerc +lat_0=49 +lon_0=-2 +k=0.9996012717 ' +
//     '+x_0=400000 +y_0=-100000 +ellps=airy ' +
//     '+towgs84=446.448,-125.157,542.06,0.15,0.247,0.842,-20.489 ' +
//     '+units=m +no_defs',
// );

// register(proj4);

// const proj27700 = getProjection('EPSG:27700');
// proj27700.setExtent([0, 0, 700000, 1300000]);

// const raster = new TileLayer();

// const url =
//   'https://tiles.arcgis.com/tiles/qHLhLQrcvEnxjtPr/arcgis/rest/services/OS_Open_Raster/MapServer/WMTS';
// fetch(url)
//   .then(function (response) {
//     return response.text();
//   })
//   .then(function (text) {
//     const result = new WMTSCapabilities().read(text);
//     const options = optionsFromCapabilities(result, {
//       layer: 'OS_Open_Raster',
//     });
//     options.attributions =
//       'Contains OS data © Crown Copyright and database right ' +
//       new Date().getFullYear();
//     options.crossOrigin = '';
//     options.projection = proj27700;
//     options.wrapX = false;
//     raster.setSource(new WMTS(options));
//   });

// const map = new Map({
//   layers: [raster],
//   controls: defaultControls({
//     attributionOptions: {collapsible: false},
//   }),
//   target: 'map',
//   view: new View({
//     center: [373500, 436500],
//     projection: proj27700,
//     zoom: 7,
//   }),
// });

// const scaleLine = new ScaleLine({bar: true, text: true, minWidth: 125});
// map.addControl(scaleLine);

// const dims = {
//   a0: [1189, 841],
//   a1: [841, 594],
//   a2: [594, 420],
//   a3: [420, 297],
//   a4: [297, 210],
//   a5: [210, 148],
// };

// // export options for html2canvase.
// // See: https://html2canvas.hertzen.com/configuration
// const exportOptions = {
//   useCORS: true,
//   ignoreElements: function (element) {
//     const className = element.className || '';
//     return (
//       className.includes('ol-control') &&
//       !className.includes('ol-scale') &&
//       (!className.includes('ol-attribution') ||
//         !className.includes('ol-uncollapsible'))
//     );
//   },
// };

// const exportButton = document.getElementById('export-pdf');

// exportButton.addEventListener(
//   'click',
//   function () {
//     exportButton.disabled = true;
//     document.body.style.cursor = 'progress';

//     const format = document.getElementById('format').value;
//     const resolution = document.getElementById('resolution').value;
//     const scale = document.getElementById('scale').value;
//     const dim = dims[format];
//     const width = Math.round((dim[0] * resolution) / 25.4);
//     const height = Math.round((dim[1] * resolution) / 25.4);
//     const viewResolution = map.getView().getResolution();
//     const scaleResolution =
//       scale /
//       getPointResolution(
//         map.getView().getProjection(),
//         resolution / 25.4,
//         map.getView().getCenter(),
//       );

//     map.once('rendercomplete', function () {
//       exportOptions.width = width;
//       exportOptions.height = height;
//       html2canvas(map.getViewport(), exportOptions).then(function (canvas) {
//         const pdf = new jspdf.jsPDF('landscape', undefined, format);
//         pdf.addImage(
//           canvas.toDataURL('image/jpeg'),
//           'JPEG',
//           0,
//           0,
//           dim[0],
//           dim[1],
//         );
//         pdf.save('map.pdf');
//         // Reset original map size
//         scaleLine.setDpi();
//         map.getTargetElement().style.width = '';
//         map.getTargetElement().style.height = '';
//         map.updateSize();
//         map.getView().setResolution(viewResolution);
//         exportButton.disabled = false;
//         document.body.style.cursor = 'auto';
//       });
//     });

//     // Set print size
//     scaleLine.setDpi(resolution);
//     map.getTargetElement().style.width = width + 'px';
//     map.getTargetElement().style.height = height + 'px';
//     map.updateSize();
//     map.getView().setResolution(scaleResolution);
//   },
//   false,
// );
 